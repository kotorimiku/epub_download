
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async getBookInfo(bookId: string) : Promise<Result<[BookInfo, VolumeInfo[]], CommandError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_book_info", { bookId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async download(bookId: string, bookInfo: BookInfo, volumeList: VolumeInfo[], volumeNoList: number[]) : Promise<Result<null, CommandError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("download", { bookId, bookInfo, volumeList, volumeNoList }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async saveConfig(newConfig: Config) : Promise<Result<null, CommandError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("save_config", { newConfig }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getConfigVue() : Promise<Result<Config, CommandError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_config_vue") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type BookInfo = { title: string | null; author: string | null; publisher: string | null; tags: string[]; description: string | null; cover: string | null }
export type CommandError = string
export type Config = { output: string; template: string; cookie: string; sleepTime: number; baseUrl: string; addCatalog?: boolean; errorImg?: string[] }
export type VolumeInfo = { title: string | null; chapter_list: string[]; chapter_path_list: string[]; url_vol: string | null; volume_no: number; cover: string | null }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

